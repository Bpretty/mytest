进程是一个动态的概念，包括进程的创建、调度和消亡的过程.是进程调度的基本单位。
内核使用进程来控制对CPU和其他资源的使用
内核中使用进程控制块pcb描述进程
/proc 中存有进程信息

sudo cat /etc/shadow    有没有密码
登录不了的（没有密码的原因）的服务的进程是由root启动的再切换为对应的身份o

内核检车能不能对某一个东西进行操作的时候检查的是有效用户id
sudo的原理也是权限提升   100 111 111 111 ->高1位为动态权限，专门可执行程序使用
chmod u+s file

passwd功能是通过有效用户id+真实用户id实现的

100 111 111 111
高2位为组的动态权限     chmod g+s file
高3位为粘滞位，不仅会判断文件权限，还会判断文件所属
只有目录拥有者和文件创建者可以删除，其他人只能删除自己的文件。如目录/tmp下   chmod 0+t file


看CPU信息   cat /proc/cpuinfo
nginx启动进程数是cpu核数的两倍
ps查看进程状态使用的是采样

用户态通过系统调用或者中断进入内核态

进程状态
R   运行
S   睡眠
Z   暂停
T   僵尸

ps -elf
uid为有效用户id
PRI 为优先级，值越大优先级越低
TIME 累计运行时间

ps -aux 
主要看cpu和内存占用率

free 看物理内存

renice 改变正在运行进程的优先级

kill 给进程发信号
kill -l 显示所有信号

crontab 定时任务
cat /etc/crontab    

bg 将挂起的进程放到后台执行
./a.out &   这样会直接后台运行


进程创建

fork创建子进程
fork接口返回两次，父进程返回值为子进程id（正值），子进程返回值为0
创建的子进程进入就绪队列等到下一周期分到时间片才会运行，因此父进程一般先于子进程结束

子进程是父进程的一份复制
对于堆、栈、全局变量，父进程中修改后发生写时复制，子进程中的数据不会被影响
对于文件，在fork之前open，父进程和子进程共用一个文件文件对象；在fork之后open，使用的是不同的文件对象，相当于打开了两次



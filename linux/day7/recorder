进程是一个动态的概念，包括进程的创建、调度和消亡的过程.是进程调度的基本单位。
内核使用进程来控制对CPU和其他资源的使用
内核中使用进程控制块pcb描述进程
/proc 中存有进程信息

sudo cat /etc/shadow    有没有密码
登录不了的（没有密码的原因）的服务的进程是由root启动的再切换为对应的身份o

内核检查一个用户是否可以做对应的事情检查的是有效用户id和有效用户组id
sudo的原理也是权限提升   100 111 111 111 ->高1位为动态权限，专门可执行程序使用
chmod u+s file

passwd功能是通过有效用户id+真实用户id实现的

100 111 111 111
高2位为组的动态权限     chmod g+s file
高3位为粘滞位，不仅会判断文件权限，还会判断文件所属
只有目录拥有者和文件创建者可以删除，其他人只能删除自己的文件。如目录/tmp下   chmod 0+t file


看CPU信息   cat /proc/cpuinfo
nginx启动进程数是cpu核数的两倍
ps查看进程状态使用的是采样

用户态通过系统调用或者中断进入内核态

进程状态
R   运行
S   睡眠    scanf   read    等
T   暂停
Z   僵尸    子进程结束，父进程忙碌，没有通过wait和waitpid

ps -elf
uid为有效用户id
PRI 为优先级，值越大优先级越低
TIME 累计运行时间

ps -aux 
主要看cpu和内存占用率

free 看物理内存

renice 改变正在运行进程的优先级

kill 给进程发信号
kill -l 显示所有信号

crontab 定时任务
cat /etc/crontab    

bg 将挂起的进程放到后台执行
./a.out &   这样会直接后台运行


进程创建

fork创建子进程
fork接口返回两次，父进程返回值为子进程id（正值），子进程返回值为0
创建的子进程进入就绪队列等到下一周期分到时间片才会运行，因此父进程一般先于子进程结束

子进程是父进程的一份复制
对于堆、栈、全局变量，父进程中修改后发生写时复制，子进程中的数据不会被影响
对于文件，在fork之前open，父进程和子进程共用一个文件文件对象；在fork之后open，使用的是不同的文件对象，相当于打开了两次

exec函数
最后的参数 NULL 是必须
鸠占鹊巢

bash的原理就是先fork一个子进程，再execl拉起一个进程

system函数
底层使用fork+execl组合实现的


进程控制与终止
孤儿进程：父进程先于子进程退出则子进程成为孤儿进程，子进程将交给1号进程（有的系统不希望1号进程负担太多而是有其他专用于处理进程）
僵尸进程：子进程先于父进程退出，但是其资源未被父进程清理（task_struct 结构体），此时子进程成为僵尸进程

wait 睡眠等待，回收子进程
waitpid
status 是传出参数，返回子进程的退出状态。
    可以从内核拿到返回值和进程是否正常结束
    如果子进程正常结束，WIFEXITED(status)返回true
    使用 WEXITSTATUS(status) 获取退出码

进程终止
main函数的自然返回
调用exit函数        在子函数中希望进程结束，应该使用exit，而不return
调用exit_函数
调用abort函数       程序会被6号信号打断，会生成core文件
接收到能导致进程终止的信号，如：ctrl+c SIGINT，ctrl+\ SIGOUT

前面三种是同步退出，后来两种是异步退出

echo $?     查看运行后的函数返回值


exit和exit_
_exit直接调用exit系统调用
exit先调用退出处理函数，再刷新i/o缓存，最后再调用exit系统调用

程序崩溃的时候不会帮你输出缓冲区
linux下文件缓冲区写入磁盘使用 fsync


守护进程
Daemon运行在后台，也叫“后台服务进程”

进程和服务的关系
进程就是服务

linux后台服务进程，名字一般有个d，如：mysqld

信号发送时是发给进程组的
kill -9 9335 杀掉id为9335的进程
kill -9 -935 杀掉进程组id为9335的所有进程

注意会话加入，只能成立新的会话

守护进程创建步骤：
1，fork创建子进程，父进程退出
2，创建新会话 setsid()，此操作可以脱离原会话周期、原进程组
3，设置工作目录为当前目录为根目录，否则程序运行时当前目录不可卸载
4，设置文件掩码为0，便于守护进程创建文件（不会改变父进程掩码信息）
5，关闭不必要的文件描述符（通常为0、1、2），减少系统资源消耗和避免与终端交互
